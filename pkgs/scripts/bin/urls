#!/usr/bin/env bash

# Media Server SSH Tunnel Script
# Sets up SSH tunnels to nixos-server and displays service URLs

# Configuration
SSH_HOST="nixos-server"
SSH_KEY="~/.ssh/nixos"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if port is already in use
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0  # Port is in use
    else
        return 1  # Port is free
    fi
}

# Function to setup SSH tunnel
setup_tunnel() {
    echo -e "${BLUE}Setting up SSH tunnels to $SSH_HOST...${NC}"
    
    # Check if any ports are already in use
    ports_in_use=()
    for port in 6001 6002 6003 6004 6005 6006 6007; do
        if check_port $port; then
            ports_in_use+=($port)
        fi
    done
    
    if [ ${#ports_in_use[@]} -gt 0 ]; then
        echo -e "${YELLOW}Warning: The following ports are already in use:${NC}"
        for port in "${ports_in_use[@]}"; do
            echo -e "${YELLOW}  - $port${NC}"
        done
        echo -e "${YELLOW}You may need to kill existing tunnels or use different ports.${NC}"
        echo ""
    fi
    
    # Start SSH tunnel in background
    ssh $SSH_HOST -N -i $SSH_KEY \
        -L 6007:localhost:8096 \
        -L 6001:localhost:9091 \
        -L 6002:localhost:9696 \
        -L 6003:localhost:8989 \
        -L 6004:localhost:7878 \
        -L 6005:localhost:5055 \
        -L 6006:localhost:6767 &
    
    SSH_PID=$!
    
    # Wait a moment for connection to establish
    sleep 2
    
    # Check if SSH process is still running
    if kill -0 $SSH_PID 2>/dev/null; then
        echo -e "${GREEN}✓ SSH tunnel established successfully (PID: $SSH_PID)${NC}"
        echo ""
        
        # Display service URLs
        echo -e "${GREEN}=== MEDIA SERVER SERVICES ===${NC}"
        echo -e "${BLUE}Jellyfin (Main Media Server):${NC}     http://localhost:6007"
        echo -e "${BLUE}Transmission (Torrent Client):${NC}    http://localhost:6001"
        echo -e "${BLUE}Prowlarr (Indexer Manager):${NC}       http://localhost:6002"
        echo -e "${BLUE}Sonarr (TV Shows):${NC}                http://localhost:6003"
        echo -e "${BLUE}Radarr (Movies):${NC}                  http://localhost:6004"
        echo -e "${BLUE}Jellyseerr (Request Manager):${NC}     http://localhost:6005"
        echo -e "${BLUE}Bazarr (Subtitles):${NC}               http://localhost:6006"
        echo ""
        
        # Create PID file for easy cleanup
        echo $SSH_PID > /tmp/media_tunnel.pid
        echo -e "${YELLOW}To stop the tunnel, run:${NC} kill $SSH_PID"
        echo -e "${YELLOW}Or use:${NC} kill \$(cat /tmp/media_tunnel.pid)"
        echo ""
        echo -e "${GREEN}Press Ctrl+C to stop the tunnel and exit${NC}"
        
        # Wait for user to stop
        wait $SSH_PID
    else
        echo -e "${RED}✗ Failed to establish SSH tunnel${NC}"
        exit 1
    fi
}

# Function to stop existing tunnels
stop_tunnels() {
    echo -e "${YELLOW}Stopping existing media tunnels...${NC}"
    
    # Kill by PID file if it exists
    if [ -f /tmp/media_tunnel.pid ]; then
        local pid=$(cat /tmp/media_tunnel.pid)
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            echo -e "${GREEN}✓ Stopped tunnel (PID: $pid)${NC}"
        fi
        rm -f /tmp/media_tunnel.pid
    fi
    
    # Kill any SSH processes to nixos-server with port forwards
    pkill -f "ssh.*$SSH_HOST.*-L.*6007"
    
    echo -e "${GREEN}✓ Cleanup complete${NC}"
}

# Function to show status
show_status() {
    echo -e "${BLUE}=== TUNNEL STATUS ===${NC}"
    
    services=(
        "6007:Jellyfin"
        "6001:Transmission" 
        "6002:Prowlarr"
        "6003:Sonarr"
        "6004:Radarr"
        "6005:Jellyseerr"
        "6006:Bazarr"
    )
    
    for service in "${services[@]}"; do
        port="${service%%:*}"
        name="${service##*:}"
        if check_port $port; then
            echo -e "${GREEN}✓ $name: http://localhost:$port${NC}"
        else
            echo -e "${RED}✗ $name: Not accessible on port $port${NC}"
        fi
    done
}

# Handle command line arguments
case "${1:-}" in
    "stop")
        stop_tunnels
        ;;
    "status")
        show_status
        ;;
    "start"|"")
        setup_tunnel
        ;;
    *)
        echo "Usage: $0 [start|stop|status]"
        echo "  start  - Setup SSH tunnels (default)"
        echo "  stop   - Stop existing tunnels"
        echo "  status - Show current tunnel status"
        exit 1
        ;;
esac

